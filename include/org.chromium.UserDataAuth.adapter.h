
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__include_org_chromium_UserDataAuth_adapter_h__ADAPTOR_MARSHAL_H
#define __dbusxx__include_org_chromium_UserDataAuth_adapter_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace chromium {

class UserDataAuthInterface_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    UserDataAuthInterface_adaptor()
    : ::DBus::InterfaceAdaptor("org.chromium.UserDataAuthInterface")
    {
        register_method(UserDataAuthInterface_adaptor, IsMounted, _IsMounted_stub);
        register_method(UserDataAuthInterface_adaptor, Unmount, _Unmount_stub);
        register_method(UserDataAuthInterface_adaptor, Remove, _Remove_stub);
        register_method(UserDataAuthInterface_adaptor, ListKeys, _ListKeys_stub);
        register_method(UserDataAuthInterface_adaptor, GetWebAuthnSecret, _GetWebAuthnSecret_stub);
        register_method(UserDataAuthInterface_adaptor, GetWebAuthnSecretHash, _GetWebAuthnSecretHash_stub);
        register_method(UserDataAuthInterface_adaptor, GetHibernateSecret, _GetHibernateSecret_stub);
        register_method(UserDataAuthInterface_adaptor, GetEncryptionInfo, _GetEncryptionInfo_stub);
        register_method(UserDataAuthInterface_adaptor, StartMigrateToDircrypto, _StartMigrateToDircrypto_stub);
        register_method(UserDataAuthInterface_adaptor, NeedsDircryptoMigration, _NeedsDircryptoMigration_stub);
        register_method(UserDataAuthInterface_adaptor, GetSupportedKeyPolicies, _GetSupportedKeyPolicies_stub);
        register_method(UserDataAuthInterface_adaptor, GetAccountDiskUsage, _GetAccountDiskUsage_stub);
        register_method(UserDataAuthInterface_adaptor, StartAuthSession, _StartAuthSession_stub);
        register_method(UserDataAuthInterface_adaptor, InvalidateAuthSession, _InvalidateAuthSession_stub);
        register_method(UserDataAuthInterface_adaptor, ExtendAuthSession, _ExtendAuthSession_stub);
        register_method(UserDataAuthInterface_adaptor, GetAuthSessionStatus, _GetAuthSessionStatus_stub);
        register_method(UserDataAuthInterface_adaptor, CreatePersistentUser, _CreatePersistentUser_stub);
        register_method(UserDataAuthInterface_adaptor, AuthenticateAuthFactor, _AuthenticateAuthFactor_stub);
        register_method(UserDataAuthInterface_adaptor, PrepareGuestVault, _PrepareGuestVault_stub);
        register_method(UserDataAuthInterface_adaptor, PrepareEphemeralVault, _PrepareEphemeralVault_stub);
        register_method(UserDataAuthInterface_adaptor, PreparePersistentVault, _PreparePersistentVault_stub);
        register_method(UserDataAuthInterface_adaptor, PrepareVaultForMigration, _PrepareVaultForMigration_stub);
        register_method(UserDataAuthInterface_adaptor, AddAuthFactor, _AddAuthFactor_stub);
        register_method(UserDataAuthInterface_adaptor, UpdateAuthFactor, _UpdateAuthFactor_stub);
        register_method(UserDataAuthInterface_adaptor, RemoveAuthFactor, _RemoveAuthFactor_stub);
        register_method(UserDataAuthInterface_adaptor, ListAuthFactors, _ListAuthFactors_stub);
        register_method(UserDataAuthInterface_adaptor, GetAuthFactorExtendedInfo, _GetAuthFactorExtendedInfo_stub);
        register_method(UserDataAuthInterface_adaptor, PrepareAuthFactor, _PrepareAuthFactor_stub);
        register_method(UserDataAuthInterface_adaptor, TerminateAuthFactor, _TerminateAuthFactor_stub);
        register_method(UserDataAuthInterface_adaptor, GetRecoveryRequest, _GetRecoveryRequest_stub);
        register_method(UserDataAuthInterface_adaptor, ResetApplicationContainer, _ResetApplicationContainer_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument IsMounted_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Unmount_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Remove_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ListKeys_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetWebAuthnSecret_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetWebAuthnSecretHash_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetHibernateSecret_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetEncryptionInfo_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument StartMigrateToDircrypto_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument NeedsDircryptoMigration_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSupportedKeyPolicies_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetAccountDiskUsage_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument StartAuthSession_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument InvalidateAuthSession_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ExtendAuthSession_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetAuthSessionStatus_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CreatePersistentUser_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AuthenticateAuthFactor_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PrepareGuestVault_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PrepareEphemeralVault_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PreparePersistentVault_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PrepareVaultForMigration_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AddAuthFactor_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument UpdateAuthFactor_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RemoveAuthFactor_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ListAuthFactors_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetAuthFactorExtendedInfo_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PrepareAuthFactor_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument TerminateAuthFactor_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRecoveryRequest_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ResetApplicationContainer_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DircryptoMigrationProgress_args[] = 
        {
            { "status", "ay", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument LowDiskSpace_args[] = 
        {
            { "status", "ay", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AuthScanResult_args[] = 
        {
            { "status", "ay", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PrepareAuthFactorProgress_args[] = 
        {
            { "status", "ay", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod UserDataAuthInterface_adaptor_methods[] = 
        {
            { "IsMounted", IsMounted_args },
            { "Unmount", Unmount_args },
            { "Remove", Remove_args },
            { "ListKeys", ListKeys_args },
            { "GetWebAuthnSecret", GetWebAuthnSecret_args },
            { "GetWebAuthnSecretHash", GetWebAuthnSecretHash_args },
            { "GetHibernateSecret", GetHibernateSecret_args },
            { "GetEncryptionInfo", GetEncryptionInfo_args },
            { "StartMigrateToDircrypto", StartMigrateToDircrypto_args },
            { "NeedsDircryptoMigration", NeedsDircryptoMigration_args },
            { "GetSupportedKeyPolicies", GetSupportedKeyPolicies_args },
            { "GetAccountDiskUsage", GetAccountDiskUsage_args },
            { "StartAuthSession", StartAuthSession_args },
            { "InvalidateAuthSession", InvalidateAuthSession_args },
            { "ExtendAuthSession", ExtendAuthSession_args },
            { "GetAuthSessionStatus", GetAuthSessionStatus_args },
            { "CreatePersistentUser", CreatePersistentUser_args },
            { "AuthenticateAuthFactor", AuthenticateAuthFactor_args },
            { "PrepareGuestVault", PrepareGuestVault_args },
            { "PrepareEphemeralVault", PrepareEphemeralVault_args },
            { "PreparePersistentVault", PreparePersistentVault_args },
            { "PrepareVaultForMigration", PrepareVaultForMigration_args },
            { "AddAuthFactor", AddAuthFactor_args },
            { "UpdateAuthFactor", UpdateAuthFactor_args },
            { "RemoveAuthFactor", RemoveAuthFactor_args },
            { "ListAuthFactors", ListAuthFactors_args },
            { "GetAuthFactorExtendedInfo", GetAuthFactorExtendedInfo_args },
            { "PrepareAuthFactor", PrepareAuthFactor_args },
            { "TerminateAuthFactor", TerminateAuthFactor_args },
            { "GetRecoveryRequest", GetRecoveryRequest_args },
            { "ResetApplicationContainer", ResetApplicationContainer_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod UserDataAuthInterface_adaptor_signals[] = 
        {
            { "DircryptoMigrationProgress", DircryptoMigrationProgress_args },
            { "LowDiskSpace", LowDiskSpace_args },
            { "AuthScanResult", AuthScanResult_args },
            { "PrepareAuthFactorProgress", PrepareAuthFactorProgress_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty UserDataAuthInterface_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface UserDataAuthInterface_adaptor_interface = 
        {
            "org.chromium.UserDataAuthInterface",
            UserDataAuthInterface_adaptor_methods,
            UserDataAuthInterface_adaptor_signals,
            UserDataAuthInterface_adaptor_properties
        };
        return &UserDataAuthInterface_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< uint8_t > IsMounted(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > Unmount(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > Remove(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > ListKeys(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetWebAuthnSecret(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetWebAuthnSecretHash(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetHibernateSecret(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetEncryptionInfo(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > StartMigrateToDircrypto(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > NeedsDircryptoMigration(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetSupportedKeyPolicies(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetAccountDiskUsage(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > StartAuthSession(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > InvalidateAuthSession(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > ExtendAuthSession(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetAuthSessionStatus(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > CreatePersistentUser(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > AuthenticateAuthFactor(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > PrepareGuestVault(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > PrepareEphemeralVault(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > PreparePersistentVault(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > PrepareVaultForMigration(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > AddAuthFactor(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > UpdateAuthFactor(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > RemoveAuthFactor(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > ListAuthFactors(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetAuthFactorExtendedInfo(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > PrepareAuthFactor(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > TerminateAuthFactor(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetRecoveryRequest(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > ResetApplicationContainer(const std::vector< uint8_t >& request) = 0;

public:

    /* signal emitters for this interface
     */
    void DircryptoMigrationProgress(const std::vector< uint8_t >& arg1)
    {
        ::DBus::SignalMessage sig("DircryptoMigrationProgress");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void LowDiskSpace(const std::vector< uint8_t >& arg1)
    {
        ::DBus::SignalMessage sig("LowDiskSpace");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void AuthScanResult(const std::vector< uint8_t >& arg1)
    {
        ::DBus::SignalMessage sig("AuthScanResult");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void PrepareAuthFactorProgress(const std::vector< uint8_t >& arg1)
    {
        ::DBus::SignalMessage sig("PrepareAuthFactorProgress");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _IsMounted_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = IsMounted(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Unmount_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Unmount(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Remove_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Remove(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ListKeys_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = ListKeys(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetWebAuthnSecret_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetWebAuthnSecret(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetWebAuthnSecretHash_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetWebAuthnSecretHash(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetHibernateSecret_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetHibernateSecret(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetEncryptionInfo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetEncryptionInfo(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _StartMigrateToDircrypto_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = StartMigrateToDircrypto(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _NeedsDircryptoMigration_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = NeedsDircryptoMigration(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSupportedKeyPolicies_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetSupportedKeyPolicies(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetAccountDiskUsage_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetAccountDiskUsage(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _StartAuthSession_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = StartAuthSession(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _InvalidateAuthSession_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = InvalidateAuthSession(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ExtendAuthSession_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = ExtendAuthSession(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetAuthSessionStatus_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetAuthSessionStatus(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _CreatePersistentUser_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = CreatePersistentUser(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _AuthenticateAuthFactor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = AuthenticateAuthFactor(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _PrepareGuestVault_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = PrepareGuestVault(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _PrepareEphemeralVault_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = PrepareEphemeralVault(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _PreparePersistentVault_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = PreparePersistentVault(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _PrepareVaultForMigration_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = PrepareVaultForMigration(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _AddAuthFactor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = AddAuthFactor(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _UpdateAuthFactor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = UpdateAuthFactor(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _RemoveAuthFactor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = RemoveAuthFactor(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ListAuthFactors_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = ListAuthFactors(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetAuthFactorExtendedInfo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetAuthFactorExtendedInfo(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _PrepareAuthFactor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = PrepareAuthFactor(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _TerminateAuthFactor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = TerminateAuthFactor(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetRecoveryRequest_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetRecoveryRequest(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ResetApplicationContainer_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = ResetApplicationContainer(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
namespace org {
namespace chromium {

class ArcQuota_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    ArcQuota_adaptor()
    : ::DBus::InterfaceAdaptor("org.chromium.ArcQuota")
    {
        register_method(ArcQuota_adaptor, GetArcDiskFeatures, _GetArcDiskFeatures_stub);
        register_method(ArcQuota_adaptor, GetCurrentSpaceForArcUid, _GetCurrentSpaceForArcUid_stub);
        register_method(ArcQuota_adaptor, GetCurrentSpaceForArcGid, _GetCurrentSpaceForArcGid_stub);
        register_method(ArcQuota_adaptor, GetCurrentSpaceForArcProjectId, _GetCurrentSpaceForArcProjectId_stub);
        register_method(ArcQuota_adaptor, SetMediaRWDataFileProjectId, _SetMediaRWDataFileProjectId_stub);
        register_method(ArcQuota_adaptor, SetMediaRWDataFileProjectInheritanceFlag, _SetMediaRWDataFileProjectInheritanceFlag_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument GetArcDiskFeatures_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetCurrentSpaceForArcUid_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetCurrentSpaceForArcGid_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetCurrentSpaceForArcProjectId_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetMediaRWDataFileProjectId_args[] = 
        {
            { "fd", "h", true },
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetMediaRWDataFileProjectInheritanceFlag_args[] = 
        {
            { "fd", "h", true },
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ArcQuota_adaptor_methods[] = 
        {
            { "GetArcDiskFeatures", GetArcDiskFeatures_args },
            { "GetCurrentSpaceForArcUid", GetCurrentSpaceForArcUid_args },
            { "GetCurrentSpaceForArcGid", GetCurrentSpaceForArcGid_args },
            { "GetCurrentSpaceForArcProjectId", GetCurrentSpaceForArcProjectId_args },
            { "SetMediaRWDataFileProjectId", SetMediaRWDataFileProjectId_args },
            { "SetMediaRWDataFileProjectInheritanceFlag", SetMediaRWDataFileProjectInheritanceFlag_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ArcQuota_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ArcQuota_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ArcQuota_adaptor_interface = 
        {
            "org.chromium.ArcQuota",
            ArcQuota_adaptor_methods,
            ArcQuota_adaptor_signals,
            ArcQuota_adaptor_properties
        };
        return &ArcQuota_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< uint8_t > GetArcDiskFeatures(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetCurrentSpaceForArcUid(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetCurrentSpaceForArcGid(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetCurrentSpaceForArcProjectId(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > SetMediaRWDataFileProjectId(const & fd, const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > SetMediaRWDataFileProjectInheritanceFlag(const & fd, const std::vector< uint8_t >& request) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetArcDiskFeatures_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetArcDiskFeatures(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetCurrentSpaceForArcUid_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetCurrentSpaceForArcUid(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetCurrentSpaceForArcGid_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetCurrentSpaceForArcGid(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetCurrentSpaceForArcProjectId_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetCurrentSpaceForArcProjectId(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetMediaRWDataFileProjectId_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

         argin1; ri >> argin1;
        std::vector< uint8_t > argin2; ri >> argin2;
        std::vector< uint8_t > argout1 = SetMediaRWDataFileProjectId(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetMediaRWDataFileProjectInheritanceFlag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

         argin1; ri >> argin1;
        std::vector< uint8_t > argin2; ri >> argin2;
        std::vector< uint8_t > argout1 = SetMediaRWDataFileProjectInheritanceFlag(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
namespace org {
namespace chromium {

class CryptohomePkcs11Interface_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    CryptohomePkcs11Interface_adaptor()
    : ::DBus::InterfaceAdaptor("org.chromium.CryptohomePkcs11Interface")
    {
        register_method(CryptohomePkcs11Interface_adaptor, Pkcs11IsTpmTokenReady, _Pkcs11IsTpmTokenReady_stub);
        register_method(CryptohomePkcs11Interface_adaptor, Pkcs11GetTpmTokenInfo, _Pkcs11GetTpmTokenInfo_stub);
        register_method(CryptohomePkcs11Interface_adaptor, Pkcs11Terminate, _Pkcs11Terminate_stub);
        register_method(CryptohomePkcs11Interface_adaptor, Pkcs11RestoreTpmTokens, _Pkcs11RestoreTpmTokens_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Pkcs11IsTpmTokenReady_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Pkcs11GetTpmTokenInfo_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Pkcs11Terminate_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Pkcs11RestoreTpmTokens_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod CryptohomePkcs11Interface_adaptor_methods[] = 
        {
            { "Pkcs11IsTpmTokenReady", Pkcs11IsTpmTokenReady_args },
            { "Pkcs11GetTpmTokenInfo", Pkcs11GetTpmTokenInfo_args },
            { "Pkcs11Terminate", Pkcs11Terminate_args },
            { "Pkcs11RestoreTpmTokens", Pkcs11RestoreTpmTokens_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod CryptohomePkcs11Interface_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty CryptohomePkcs11Interface_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface CryptohomePkcs11Interface_adaptor_interface = 
        {
            "org.chromium.CryptohomePkcs11Interface",
            CryptohomePkcs11Interface_adaptor_methods,
            CryptohomePkcs11Interface_adaptor_signals,
            CryptohomePkcs11Interface_adaptor_properties
        };
        return &CryptohomePkcs11Interface_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< uint8_t > Pkcs11IsTpmTokenReady(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > Pkcs11GetTpmTokenInfo(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > Pkcs11Terminate(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > Pkcs11RestoreTpmTokens(const std::vector< uint8_t >& request) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Pkcs11IsTpmTokenReady_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Pkcs11IsTpmTokenReady(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Pkcs11GetTpmTokenInfo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Pkcs11GetTpmTokenInfo(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Pkcs11Terminate_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Pkcs11Terminate(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Pkcs11RestoreTpmTokens_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = Pkcs11RestoreTpmTokens(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
namespace org {
namespace chromium {

class InstallAttributesInterface_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    InstallAttributesInterface_adaptor()
    : ::DBus::InterfaceAdaptor("org.chromium.InstallAttributesInterface")
    {
        register_method(InstallAttributesInterface_adaptor, InstallAttributesGet, _InstallAttributesGet_stub);
        register_method(InstallAttributesInterface_adaptor, InstallAttributesSet, _InstallAttributesSet_stub);
        register_method(InstallAttributesInterface_adaptor, InstallAttributesFinalize, _InstallAttributesFinalize_stub);
        register_method(InstallAttributesInterface_adaptor, InstallAttributesGetStatus, _InstallAttributesGetStatus_stub);
        register_method(InstallAttributesInterface_adaptor, GetFirmwareManagementParameters, _GetFirmwareManagementParameters_stub);
        register_method(InstallAttributesInterface_adaptor, RemoveFirmwareManagementParameters, _RemoveFirmwareManagementParameters_stub);
        register_method(InstallAttributesInterface_adaptor, SetFirmwareManagementParameters, _SetFirmwareManagementParameters_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument InstallAttributesGet_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument InstallAttributesSet_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument InstallAttributesFinalize_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument InstallAttributesGetStatus_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetFirmwareManagementParameters_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RemoveFirmwareManagementParameters_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetFirmwareManagementParameters_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod InstallAttributesInterface_adaptor_methods[] = 
        {
            { "InstallAttributesGet", InstallAttributesGet_args },
            { "InstallAttributesSet", InstallAttributesSet_args },
            { "InstallAttributesFinalize", InstallAttributesFinalize_args },
            { "InstallAttributesGetStatus", InstallAttributesGetStatus_args },
            { "GetFirmwareManagementParameters", GetFirmwareManagementParameters_args },
            { "RemoveFirmwareManagementParameters", RemoveFirmwareManagementParameters_args },
            { "SetFirmwareManagementParameters", SetFirmwareManagementParameters_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod InstallAttributesInterface_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty InstallAttributesInterface_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface InstallAttributesInterface_adaptor_interface = 
        {
            "org.chromium.InstallAttributesInterface",
            InstallAttributesInterface_adaptor_methods,
            InstallAttributesInterface_adaptor_signals,
            InstallAttributesInterface_adaptor_properties
        };
        return &InstallAttributesInterface_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< uint8_t > InstallAttributesGet(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > InstallAttributesSet(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > InstallAttributesFinalize(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > InstallAttributesGetStatus(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetFirmwareManagementParameters(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > RemoveFirmwareManagementParameters(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > SetFirmwareManagementParameters(const std::vector< uint8_t >& request) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _InstallAttributesGet_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = InstallAttributesGet(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _InstallAttributesSet_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = InstallAttributesSet(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _InstallAttributesFinalize_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = InstallAttributesFinalize(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _InstallAttributesGetStatus_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = InstallAttributesGetStatus(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetFirmwareManagementParameters_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetFirmwareManagementParameters(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _RemoveFirmwareManagementParameters_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = RemoveFirmwareManagementParameters(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetFirmwareManagementParameters_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = SetFirmwareManagementParameters(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
namespace org {
namespace chromium {

class CryptohomeMiscInterface_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    CryptohomeMiscInterface_adaptor()
    : ::DBus::InterfaceAdaptor("org.chromium.CryptohomeMiscInterface")
    {
        register_method(CryptohomeMiscInterface_adaptor, GetSystemSalt, _GetSystemSalt_stub);
        register_method(CryptohomeMiscInterface_adaptor, UpdateCurrentUserActivityTimestamp, _UpdateCurrentUserActivityTimestamp_stub);
        register_method(CryptohomeMiscInterface_adaptor, GetSanitizedUsername, _GetSanitizedUsername_stub);
        register_method(CryptohomeMiscInterface_adaptor, GetLoginStatus, _GetLoginStatus_stub);
        register_method(CryptohomeMiscInterface_adaptor, LockToSingleUserMountUntilReboot, _LockToSingleUserMountUntilReboot_stub);
        register_method(CryptohomeMiscInterface_adaptor, GetRsuDeviceId, _GetRsuDeviceId_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument GetSystemSalt_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument UpdateCurrentUserActivityTimestamp_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSanitizedUsername_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetLoginStatus_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument LockToSingleUserMountUntilReboot_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRsuDeviceId_args[] = 
        {
            { "request", "ay", true },
            { "reply", "ay", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod CryptohomeMiscInterface_adaptor_methods[] = 
        {
            { "GetSystemSalt", GetSystemSalt_args },
            { "UpdateCurrentUserActivityTimestamp", UpdateCurrentUserActivityTimestamp_args },
            { "GetSanitizedUsername", GetSanitizedUsername_args },
            { "GetLoginStatus", GetLoginStatus_args },
            { "LockToSingleUserMountUntilReboot", LockToSingleUserMountUntilReboot_args },
            { "GetRsuDeviceId", GetRsuDeviceId_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod CryptohomeMiscInterface_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty CryptohomeMiscInterface_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface CryptohomeMiscInterface_adaptor_interface = 
        {
            "org.chromium.CryptohomeMiscInterface",
            CryptohomeMiscInterface_adaptor_methods,
            CryptohomeMiscInterface_adaptor_signals,
            CryptohomeMiscInterface_adaptor_properties
        };
        return &CryptohomeMiscInterface_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< uint8_t > GetSystemSalt(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > UpdateCurrentUserActivityTimestamp(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetSanitizedUsername(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetLoginStatus(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > LockToSingleUserMountUntilReboot(const std::vector< uint8_t >& request) = 0;
    virtual std::vector< uint8_t > GetRsuDeviceId(const std::vector< uint8_t >& request) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetSystemSalt_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetSystemSalt(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _UpdateCurrentUserActivityTimestamp_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = UpdateCurrentUserActivityTimestamp(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSanitizedUsername_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetSanitizedUsername(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetLoginStatus_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetLoginStatus(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _LockToSingleUserMountUntilReboot_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = LockToSingleUserMountUntilReboot(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetRsuDeviceId_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint8_t > argin1; ri >> argin1;
        std::vector< uint8_t > argout1 = GetRsuDeviceId(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif //__dbusxx__include_org_chromium_UserDataAuth_adapter_h__ADAPTOR_MARSHAL_H
