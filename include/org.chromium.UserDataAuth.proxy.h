
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__include_org_chromium_UserDataAuth_proxy_h__PROXY_MARSHAL_H
#define __dbusxx__include_org_chromium_UserDataAuth_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace chromium {

class UserDataAuthInterface_proxy
: public ::DBus::InterfaceProxy
{
public:

    UserDataAuthInterface_proxy()
    : ::DBus::InterfaceProxy("org.chromium.UserDataAuthInterface")
    {
        connect_signal(UserDataAuthInterface_proxy, DircryptoMigrationProgress, _DircryptoMigrationProgress_stub);
        connect_signal(UserDataAuthInterface_proxy, LowDiskSpace, _LowDiskSpace_stub);
        connect_signal(UserDataAuthInterface_proxy, AuthScanResult, _AuthScanResult_stub);
        connect_signal(UserDataAuthInterface_proxy, PrepareAuthFactorProgress, _PrepareAuthFactorProgress_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< uint8_t > IsMounted(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("IsMounted");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > Unmount(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Unmount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > Remove(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Remove");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > ListKeys(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("ListKeys");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetWebAuthnSecret(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetWebAuthnSecret");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetWebAuthnSecretHash(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetWebAuthnSecretHash");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetHibernateSecret(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetHibernateSecret");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetEncryptionInfo(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetEncryptionInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > StartMigrateToDircrypto(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("StartMigrateToDircrypto");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > NeedsDircryptoMigration(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("NeedsDircryptoMigration");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetSupportedKeyPolicies(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetSupportedKeyPolicies");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetAccountDiskUsage(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetAccountDiskUsage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > StartAuthSession(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("StartAuthSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > InvalidateAuthSession(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("InvalidateAuthSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > ExtendAuthSession(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("ExtendAuthSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetAuthSessionStatus(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetAuthSessionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > CreatePersistentUser(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("CreatePersistentUser");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > AuthenticateAuthFactor(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("AuthenticateAuthFactor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > PrepareGuestVault(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("PrepareGuestVault");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > PrepareEphemeralVault(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("PrepareEphemeralVault");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > PreparePersistentVault(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("PreparePersistentVault");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > PrepareVaultForMigration(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("PrepareVaultForMigration");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > AddAuthFactor(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("AddAuthFactor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > UpdateAuthFactor(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("UpdateAuthFactor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > RemoveAuthFactor(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("RemoveAuthFactor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > ListAuthFactors(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("ListAuthFactors");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetAuthFactorExtendedInfo(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetAuthFactorExtendedInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > PrepareAuthFactor(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("PrepareAuthFactor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > TerminateAuthFactor(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("TerminateAuthFactor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetRecoveryRequest(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetRecoveryRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > ResetApplicationContainer(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("ResetApplicationContainer");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DircryptoMigrationProgress(const std::vector< uint8_t >& status) = 0;
    virtual void LowDiskSpace(const std::vector< uint8_t >& status) = 0;
    virtual void AuthScanResult(const std::vector< uint8_t >& status) = 0;
    virtual void PrepareAuthFactorProgress(const std::vector< uint8_t >& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DircryptoMigrationProgress_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< uint8_t > status;
        ri >> status;
        DircryptoMigrationProgress(status);
    }
    void _LowDiskSpace_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< uint8_t > status;
        ri >> status;
        LowDiskSpace(status);
    }
    void _AuthScanResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< uint8_t > status;
        ri >> status;
        AuthScanResult(status);
    }
    void _PrepareAuthFactorProgress_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< uint8_t > status;
        ri >> status;
        PrepareAuthFactorProgress(status);
    }
};

} } 
namespace org {
namespace chromium {

class ArcQuota_proxy
: public ::DBus::InterfaceProxy
{
public:

    ArcQuota_proxy()
    : ::DBus::InterfaceProxy("org.chromium.ArcQuota")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< uint8_t > GetArcDiskFeatures(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetArcDiskFeatures");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetCurrentSpaceForArcUid(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetCurrentSpaceForArcUid");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetCurrentSpaceForArcGid(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetCurrentSpaceForArcGid");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetCurrentSpaceForArcProjectId(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetCurrentSpaceForArcProjectId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > SetMediaRWDataFileProjectId(const & fd, const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fd;
        wi << request;
        call.member("SetMediaRWDataFileProjectId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > SetMediaRWDataFileProjectInheritanceFlag(const & fd, const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fd;
        wi << request;
        call.member("SetMediaRWDataFileProjectInheritanceFlag");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace org {
namespace chromium {

class CryptohomePkcs11Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    CryptohomePkcs11Interface_proxy()
    : ::DBus::InterfaceProxy("org.chromium.CryptohomePkcs11Interface")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< uint8_t > Pkcs11IsTpmTokenReady(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Pkcs11IsTpmTokenReady");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > Pkcs11GetTpmTokenInfo(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Pkcs11GetTpmTokenInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > Pkcs11Terminate(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Pkcs11Terminate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > Pkcs11RestoreTpmTokens(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Pkcs11RestoreTpmTokens");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace org {
namespace chromium {

class InstallAttributesInterface_proxy
: public ::DBus::InterfaceProxy
{
public:

    InstallAttributesInterface_proxy()
    : ::DBus::InterfaceProxy("org.chromium.InstallAttributesInterface")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< uint8_t > InstallAttributesGet(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("InstallAttributesGet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > InstallAttributesSet(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("InstallAttributesSet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > InstallAttributesFinalize(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("InstallAttributesFinalize");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > InstallAttributesGetStatus(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("InstallAttributesGetStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetFirmwareManagementParameters(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetFirmwareManagementParameters");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > RemoveFirmwareManagementParameters(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("RemoveFirmwareManagementParameters");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > SetFirmwareManagementParameters(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("SetFirmwareManagementParameters");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace org {
namespace chromium {

class CryptohomeMiscInterface_proxy
: public ::DBus::InterfaceProxy
{
public:

    CryptohomeMiscInterface_proxy()
    : ::DBus::InterfaceProxy("org.chromium.CryptohomeMiscInterface")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< uint8_t > GetSystemSalt(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetSystemSalt");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > UpdateCurrentUserActivityTimestamp(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("UpdateCurrentUserActivityTimestamp");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetSanitizedUsername(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetSanitizedUsername");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetLoginStatus(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetLoginStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > LockToSingleUserMountUntilReboot(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("LockToSingleUserMountUntilReboot");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetRsuDeviceId(const std::vector< uint8_t >& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("GetRsuDeviceId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__include_org_chromium_UserDataAuth_proxy_h__PROXY_MARSHAL_H
